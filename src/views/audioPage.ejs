<!DOCTYPE html>
<html lang="cs">
<head>
  <meta charset="UTF-8">
  <title>Audio Analýza</title>
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
<%- include('partials/navbar') %>
<div class="audio-container">
  <p class="description">Nahrávat je doporučeno na mobilním zařízení a zde jen sledovat</p>
  <button id="recordButton" class="record-button">
    <span id="buttonText" class="button-text">START</span>
  </button>
  <p class="description down">Aktuální nahrávání</p>
  <p id="onlyPc" class="not-recording">Přihlašte se přes mobilní zařízení a začněte nahrávat tam</p>
  <p class="unseen">Typ zařízení:</p>
</div>
<script>
  let stream;
  let chunkIndex = 0;
  let secs = 0;
  let recordingId;  // Globální proměnná pro uložení ID nahrávky

  const multipleDevices = "<%= multipleDevices %>";
  const deviceType = "<%= deviceType %>";
  const hasMobileSession = "<%= hasMobileSession %>";

  const onlyPc = document.getElementById("onlyPc");



  console.log("predavam ejs sablone: ")
  console.log(multipleDevices)
  console.log(deviceType)
  console.log(hasMobileSession)

  if(hasMobileSession){
    onlyPc.classList.toggle("unseen");
  }



  async function startRecording() {

    // Zavoláme endpoint pro vytvoření nové nahrávky


    // Nastavení pro nahrávání
    stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    recording = true;
    chunkIndex = 0;


    loopRecording(recordingId);
  }

  function loopRecording(recordingId) {
    if (!recording) return;

    const mediaRecorder = new MediaRecorder(stream);
    const chunks = [];

    mediaRecorder.ondataavailable = e => {
      chunks.push(e.data);
    };

    mediaRecorder.onstop = () => {
      const blob = new Blob(chunks, { type: 'audio/webm' });
      const currentChunk = chunkIndex++;

      // Spusť odesílání asynchronně, ale nečekej na něj
      sendChunkToServer(blob, currentChunk, recordingId);
      console.log("blob", blob);
      console.log("currentChunk", currentChunk);

      // ✅ mezitím už můžeš rozjet nový rekordér
      loopRecording(recordingId);
    };

    mediaRecorder.start();
    setTimeout(() => mediaRecorder.stop(), 1000); // Nahrávání na 1 sekundu
  }

  async function sendChunkToServer(blob, chunkNumber, recordingId) {
    const formData = new FormData();
    formData.append("audio_data", blob, `chunk_${chunkNumber}.webm`);
    formData.append("recordingId", recordingId);  // Posíláme ID nahrávky
    console.log('recordingId:', recordingId);  // Ověřujeme, že recordingId není undefined
    console.log("Odesílám soubor:", `chunk_${chunkNumber}.webm`); // Přidej log pro kontrolu

    try {
      const res = await fetch("/record/upload", {
        method: "POST",
        body: formData
      });
      const data = await res.json();

    } catch (err) {
      console.error("Chyba při uploadu chunku:", err);
    }
  }

  function stopRecording() {
    recording = false;
    recordingId = null;
    if (stream) stream.getTracks().forEach(track => track.stop());
  }
  const recordButton = document.getElementById("recordButton");
  const buttonText = document.getElementById("buttonText");
  let recording_local = false;  // Lokální stav pro grafiku

  recordButton.addEventListener("click", async () => {
    if (recording_local) {
      // Pokud nahráváme, zastavíme nahrávání
      recordButton.classList.remove('active');
      await stopRecording();  // Zavoláme metodu pro zastavení nahrávání
      await stopRecordingSession();  // Zavoláme endpoint pro zastavení nahrávání na backendu
      recording_local = false;
      buttonText.textContent = "START";
    } else {
      // Před zahájením nahrávání musíme zkontrolovat, zda můžeme začít
      const canRecord = await checkRecordingStatus();  // Zavoláme funkci pro kontrolu, zda nahrávání není již aktivní
      if (canRecord) {
        // Pokud můžeme začít nahrávat, přepneme stav tlačítka a zahájíme nahrávání
        recordButton.classList.toggle('active');
        await startRecording();
        await startRecordingSession()// Zavoláme endpoint pro zahájení nahrávání
        recording_local = true;
        buttonText.textContent = "STOP";
      } else {
        // Pokud nemůžeme nahrávat, neuděláme nic
        console.log("Nahrávání již probíhá na jiném zařízení.");
      }
    }
  });

  // Funkce pro zastavení nahrávání na backendu
  const stopRecordingSession = async () => {
    try {
      console.log("recording id je: " + recordingId)
      const response = await fetch('/session/update', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          isRecording: false,
          recordingId: null  // Resetujeme recordingId při zastavení
        })
      });

      const data = await response.json();

      if (response.ok) {
        console.log("Nahrávání bylo zastaveno.");
      } else {
        console.error("Chyba při zastavení nahrávání:", data.error);
      }
    } catch (error) {
      console.error("Chyba při zastavení nahrávání:", error);
    }
  };

  // Funkce pro kontrolu, zda můžeme začít nahrávat
  const checkRecordingStatus = async () => {
    const response = await fetch('/recordings/create', { method: 'POST' });
    const data = await response.json();

    if (data.recordingId) {
      recordingId = data.recordingId;  // Uložíme ID nahrávky pro pozdější použití
      console.log('Nahrávka vytvořena s ID:', recordingId);
    } else {
      console.error('Chyba při vytváření nahrávky');
      return;
    }




    try {
      const response = await fetch('/session/update', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ isRecording: false, recordingId: recordingId })  // Fake data pro kontrolu
      });

      const data = await response.json();
      console.log("data isrecording: " + data.isRecording)
      if (!data.isRecording) {
        return true;  // Můžeme začít nahrávat
      } else {
        alert('Nahrávání již probíhá na jiném zařízení.');
        return false;  // Nahrávání probíhá, nemůžeme začít
      }
    } catch (error) {
      console.error("Chyba při komunikaci se serverem:", error);
      return false;  // Pokud nastala chyba, nebudeme moci začít nahrávat
    }
  };




  // Funkce pro zahájení nahrávání na backendu
  const startRecordingSession = async () => {
    try {
      const response = await fetch('/session/update', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          isRecording: true,
          recordingId: recordingId  // Unikátní ID pro nové nahrávání
        })
      });

      const data = await response.json();

      if (response.ok) {
        console.log("Nahrávání bylo zahájeno.");
      } else {
        console.error("Chyba při startování nahrávání:", data.error);
      }
    } catch (error) {
      console.error("Chyba při startování nahrávání:", error);
    }
  };


</script>
</body>
</html>
