<!DOCTYPE html>
<html lang="cs">
<head>
  <meta charset="UTF-8">
  <title>Audio Analýza</title>
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
<%- include('partials/navbar') %>
<div class="audio-container">
  <p class="description">Nahrávat je doporučeno na mobilním zařízení a zde jen sledovat</p>
  <button id="recordButton" class="record-button">
    <span id="buttonText" class="button-text">START</span>
  </button>
  <p class="description down">Aktuální nahrávání</p>
  <p id="onlyPc" class="not-recording">Přihlašte se přes mobilní zařízení a začněte nahrávat tam</p>
  <p class="unseen">Typ zařízení:</p>
</div>
<script>
  let stream;
  let recording = false;
  let chunkIndex = 0;
  let secs = 0;
  let recordingId;  // Globální proměnná pro uložení ID nahrávky

  const multipleDevices = "<%= multipleDevices %>";
  console.log("devices jsou:")
  console.log(multipleDevices)


  async function startRecording() {

    // Zavoláme endpoint pro vytvoření nové nahrávky
    const response = await fetch('/recordings/create', { method: 'POST' });
    const data = await response.json();

    if (data.recordingId) {
      recordingId = data.recordingId;  // Uložíme ID nahrávky pro pozdější použití
      console.log('Nahrávka vytvořena s ID:', recordingId);
    } else {
      console.error('Chyba při vytváření nahrávky');
      return;
    }

    // Nastavení pro nahrávání
    stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    recording = true;
    chunkIndex = 0;


    loopRecording(recordingId);
  }

  function loopRecording(recordingId) {
    if (!recording) return;

    const mediaRecorder = new MediaRecorder(stream);
    const chunks = [];

    mediaRecorder.ondataavailable = e => {
      chunks.push(e.data);
    };

    mediaRecorder.onstop = () => {
      const blob = new Blob(chunks, { type: 'audio/webm' });
      const currentChunk = chunkIndex++;

      // Spusť odesílání asynchronně, ale nečekej na něj
      sendChunkToServer(blob, currentChunk, recordingId);
      console.log("blob", blob);
      console.log("currentChunk", currentChunk);

      // ✅ mezitím už můžeš rozjet nový rekordér
      loopRecording(recordingId);
    };

    mediaRecorder.start();
    setTimeout(() => mediaRecorder.stop(), 1000); // Nahrávání na 1 sekundu
  }

  async function sendChunkToServer(blob, chunkNumber, recordingId) {
    const formData = new FormData();
    formData.append("audio_data", blob, `chunk_${chunkNumber}.webm`);
    formData.append("recordingId", recordingId);  // Posíláme ID nahrávky
    console.log('recordingId:', recordingId);  // Ověřujeme, že recordingId není undefined
    console.log("Odesílám soubor:", `chunk_${chunkNumber}.webm`); // Přidej log pro kontrolu

    try {
      const res = await fetch("/record/upload", {
        method: "POST",
        body: formData
      });
      const data = await res.json();
      console.log(data); // Zpracuj odpověď

    } catch (err) {
      console.error("Chyba při uploadu chunku:", err);
    }
  }

  function stopRecording() {
    recording = false;
    recordingId = null;
    if (stream) stream.getTracks().forEach(track => track.stop());
  }

  const recordButton = document.getElementById("recordButton");
  const buttonText = document.getElementById("buttonText");
  const onlyPc = document.getElementById("onlyPc");

  recordButton.addEventListener("click", async () => {
    if (recording) {
      recordButton.classList.remove('active');
      stopRecording();
      recording = false;
      buttonText.textContent = "START";
    } else {
      recordButton.classList.toggle('active');
      startRecording();
      recording = true;
      buttonText.textContent = "STOP";
    }
  });

</script>
</body>
</html>
